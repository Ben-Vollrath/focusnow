create type "public"."billing_cycle" as enum ('weekly', 'monthly', 'none');

alter table "public"."image_generation_logs" drop constraint "image_generation_logs_user_id_fkey";

create table "public"."favorite_themes" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null default auth.uid(),
    "theme_id" bigint not null
);


alter table "public"."favorite_themes" enable row level security;

create table "public"."themes" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "image_url" text not null,
    "prompt" text not null,
    "isFeatured" boolean not null default false,
    "tags" text[] not null,
    "order" bigint not null default '1'::bigint
);


alter table "public"."themes" enable row level security;

alter table "public"."image_generation_logs" add column "theme_id" bigint;

alter table "public"."users" add column "purchased_credits" bigint not null default '0'::bigint;

CREATE UNIQUE INDEX favorite_themes_pkey ON public.favorite_themes USING btree (id);

CREATE UNIQUE INDEX themes_pkey ON public.themes USING btree (id);

alter table "public"."favorite_themes" add constraint "favorite_themes_pkey" PRIMARY KEY using index "favorite_themes_pkey";

alter table "public"."themes" add constraint "themes_pkey" PRIMARY KEY using index "themes_pkey";

alter table "public"."favorite_themes" add constraint "favorite_themes_theme_id_fkey" FOREIGN KEY (theme_id) REFERENCES themes(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."favorite_themes" validate constraint "favorite_themes_theme_id_fkey";

alter table "public"."favorite_themes" add constraint "favorite_themes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."favorite_themes" validate constraint "favorite_themes_user_id_fkey";

alter table "public"."image_generation_logs" add constraint "image_generation_logs_theme_id_fkey" FOREIGN KEY (theme_id) REFERENCES themes(id) not valid;

alter table "public"."image_generation_logs" validate constraint "image_generation_logs_theme_id_fkey";

alter table "public"."image_generation_logs" add constraint "image_generation_logs_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."image_generation_logs" validate constraint "image_generation_logs_user_id_fkey";

set check_function_bodies = off;

DROP FUNCTION IF EXISTS public.decrement_user_credits(uuid, integer);

CREATE OR REPLACE FUNCTION public.decrement_user_credits(user_id uuid, decrement_by integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
declare
  current_credits int;
  current_purchased_credits int;
begin
  -- Lock the row for update
  select credits, purchased_credits 
  into current_credits, current_purchased_credits
  from users 
  where id = user_id 
  for update;

  -- Check and decrement from credits first
  if current_credits >= decrement_by then
    update users
    set credits = credits - decrement_by
    where id = user_id;
    return 'credits';
  
  -- If credits are insufficient, check purchased_credits
  elsif current_purchased_credits >= decrement_by then
    update users
    set purchased_credits = purchased_credits - decrement_by
    where id = user_id;
    return 'purchased_credits';
  
  -- If both are insufficient, raise an error
  else
    raise exception 'Not enough credits in both credits and purchased_credits';
  end if;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.increment_purchased_credits(user_id uuid, increment_value integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
BEGIN
    -- Update the purchased_credits field
    UPDATE users
    SET purchased_credits = purchased_credits + increment_value
    WHERE id = user_id;
    
    -- Ensure the function raises an exception if no rows were updated
    IF NOT FOUND THEN
        RAISE EXCEPTION 'User with id % does not exist', user_id;
    END IF;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.refund_credits(user_id uuid, increment_by integer, column_name text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
begin
  if column_name = 'credits' then
    -- Increment the credits column
    update users
    set credits = credits + increment_by
    where id = user_id;
  elsif column_name = 'purchased_credits' then
    -- Increment the purchased_credits column
    update users
    set purchased_credits = purchased_credits + increment_by
    where id = user_id;
  else
    raise exception 'Invalid column name: %', column_name;
  end if;
end;
$function$
;

create or replace view "public"."theme_information" as  SELECT themes.id,
    themes.image_url,
    themes.name,
    themes."isFeatured",
    themes.tags,
    themes."order"
   FROM themes;


DROP FUNCTION IF EXISTS public.decrement_credits(uuid, integer);

CREATE OR REPLACE FUNCTION public.decrement_credits(user_id uuid, decrement_by integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
declare
  current_credits int;
  current_purchased_credits int;
begin
  -- Lock the row for update
  select credits, purchased_credits 
  into current_credits, current_purchased_credits
  from users 
  where id = user_id 
  for update;

  -- Check and decrement from credits first
  if current_credits >= decrement_by then
    update users
    set credits = credits - decrement_by
    where id = user_id;
    return 'credits';
  
  -- If credits are insufficient, check purchased_credits
  elsif current_purchased_credits >= decrement_by then
    update users
    set purchased_credits = purchased_credits - decrement_by
    where id = user_id;
    return 'purchased_credits';
  
  -- If both are insufficient, raise an error
  else
    raise exception 'Not enough credits in both credits and purchased_credits';
  end if;
end;
$function$
;

grant delete on table "public"."favorite_themes" to "anon";

grant insert on table "public"."favorite_themes" to "anon";

grant references on table "public"."favorite_themes" to "anon";

grant select on table "public"."favorite_themes" to "anon";

grant trigger on table "public"."favorite_themes" to "anon";

grant truncate on table "public"."favorite_themes" to "anon";

grant update on table "public"."favorite_themes" to "anon";

grant delete on table "public"."favorite_themes" to "authenticated";

grant insert on table "public"."favorite_themes" to "authenticated";

grant references on table "public"."favorite_themes" to "authenticated";

grant select on table "public"."favorite_themes" to "authenticated";

grant trigger on table "public"."favorite_themes" to "authenticated";

grant truncate on table "public"."favorite_themes" to "authenticated";

grant update on table "public"."favorite_themes" to "authenticated";

grant delete on table "public"."favorite_themes" to "service_role";

grant insert on table "public"."favorite_themes" to "service_role";

grant references on table "public"."favorite_themes" to "service_role";

grant select on table "public"."favorite_themes" to "service_role";

grant trigger on table "public"."favorite_themes" to "service_role";

grant truncate on table "public"."favorite_themes" to "service_role";

grant update on table "public"."favorite_themes" to "service_role";

grant delete on table "public"."themes" to "anon";

grant insert on table "public"."themes" to "anon";

grant references on table "public"."themes" to "anon";

grant select on table "public"."themes" to "anon";

grant trigger on table "public"."themes" to "anon";

grant truncate on table "public"."themes" to "anon";

grant update on table "public"."themes" to "anon";

grant delete on table "public"."themes" to "authenticated";

grant insert on table "public"."themes" to "authenticated";

grant references on table "public"."themes" to "authenticated";

grant select on table "public"."themes" to "authenticated";

grant trigger on table "public"."themes" to "authenticated";

grant truncate on table "public"."themes" to "authenticated";

grant update on table "public"."themes" to "authenticated";

grant delete on table "public"."themes" to "service_role";

grant insert on table "public"."themes" to "service_role";

grant references on table "public"."themes" to "service_role";

grant select on table "public"."themes" to "service_role";

grant trigger on table "public"."themes" to "service_role";

grant truncate on table "public"."themes" to "service_role";

grant update on table "public"."themes" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."favorite_themes"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."favorite_themes"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."favorite_themes"
as permissive
for select
to public
using (( SELECT (auth.uid() = favorite_themes.user_id)));


create policy "Enable read access for auth users"
on "public"."themes"
as permissive
for select
to authenticated
using (true);



